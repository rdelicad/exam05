Nombre de la asignación : cpp_module02
Archivos esperados : Warlock.cpp Warlock.hpp
                   ASpell.hpp ASpell.cpp
				   ATarget.hpp ATarget.cpp
				   Fwoosh.hpp Fwoosh.cpp
				   Dummy.hpp Dummy.cpp
				   Fireball.hpp Fireball.cpp
				   Polymorph.hpp Polymorph.cpp
				   BrickWall.hpp BrickWall.cpp
				   SpellBook.hpp SpellBook.cpp
				   TargetGenerator.hpp TargetGenerator.cpp
--------------------------------------------------------------------------------

En las clases Warlock, SpellBook y TargetGenerator, la sentencia switch está
PROHIBIDO y su uso resultaría en un -42.

Cree los siguientes dos hechizos, en el mismo modelo que Fwoosh:

* Bola de Fuego (Nombre: «Bola de Fuego», Efectos: «Quemado a cenizas»)
* Polimorfo (Nombre: «Polimorfo», Efectos: «convertido en bicho»)

Además de esto, sólo para que no tenga sólo muñeco para atacar, vamos a hacer un
nuevo objetivo para él, que será el BrickWall (Tipo: «Inconspicuous Red-brick Wall»).

Ahora, haz una clase Libro de Hechizos, en forma canónica, que no pueda ser copiada o instanciada
por copia. Tendrá las siguientes funciones:

* void learnSpell(ASpell*), que COPIA un hechizo en el libro
* void forgetSpell(string const &), que borra un hechizo del libro, excepto
  si no está
* ASpell* createSpell(string const &), que recibe una cadena correspondiente a
  el nombre de un hechizo, lo crea y lo devuelve.

Modifica el Warlock, ahora, haz que tenga un libro de hechizos que será creado con
y destruido con él. También haz que sus funciones aprenderHechizo y olvidarHechizo
llamen a las del libro de hechizos.

La función lanzarHechizo tendrá que usar el Libro de Hechizos para crear el hechizo
que intenta lanzar.

Hacer una clase TargetGenerator, en forma canónica, y como antes,
no copiable.

Tendrá las siguientes funciones:

* void learnTargetType(ATarget*), enseña un objetivo al generador

* void forgetTargetType(string const &), que hace que el generador olvide un
  tipo de objetivo si se conoce

* ATarget* createTarget(string const &), que crea un objetivo del tipo
  tipo especificado

Uf, ya está. Ahora aquí está una prueba principal. No es muy completa, así que asegúrese de 
de usar el tuyo propio.

int main()
{
  Warlock richard("Richard", "foo");
  richard.setTitle("Hello, I'm Richard the Warlock!");
  BrickWall model1;

  Polymorph* polymorph = new Polymorph();
  TargetGenerator tarGen;

  tarGen.learnTargetType(&model1);
  richard.learnSpell(polymorph);

  Fireball* fireball = new Fireball();

  richard.learnSpell(fireball);

  ATarget* wall = tarGen.createTarget("Inconspicuous Red-brick Wall");

  richard.introduce();
  richard.launchSpell("Polymorph", *wall);
  richard.launchSpell("Fireball", *wall);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, Hello, I'm Richard the Warlock!!$
Inconspicuous Red-brick Wall has been turned into a critter!$
Inconspicuous Red-brick Wall has been burnt to a crisp!$
Richard: My job here is done!$
~$